load("C:/Users/kc19o338/Desktop/Real world predictions project/TwoStageRCTsResults.RData")
##########################################################
############### LIBRARIES #################################
### Load needed variables
library(readxl)
library(ggpubr)
library(gridExtra)
library(meta)
library(netmeta)
library(ggplot2)
library(hrbrthemes)
RiskData$RiskpredictedPl<-NA
RiskData$RiskpredictedDF<-NA
RiskData$RiskpredictedGA<-NA
RiskData$RiskpredictedN<-NA
##
for (i in 1:nrow(RiskData)){
for(j in 1:99){
if (round(RiskData$RiskPreSpecified[i],2)==round(PlF$Risknew[j],2)) {RiskData$RiskpredictedPl[i]<-PlF$prelapse[j]}
if (round(RiskData$RiskPreSpecified[i],2)==round(DFF$Risknew[j],2)) {RiskData$RiskpredictedDF[i]<-DFF$prelapse[j]}
if (round(RiskData$RiskPreSpecified[i],2)==round(GAF$Risknew[j],2)) {RiskData$RiskpredictedGA[i]<-GAF$prelapse[j]}
if (round(RiskData$RiskPreSpecified[i],2)==round(NF$Risknew[j],2)) {RiskData$RiskpredictedN[i]<-NF$prelapse[j]}
}
}
RiskData$Treatment<-RiskData$TRT01A
RiskData$RDN<-RiskData$RiskpredictedPl-RiskData$RiskpredictedN
RiskData$RDDF<-RiskData$RiskpredictedPl-RiskData$RiskpredictedDF
RiskData$RDGA<-RiskData$RiskpredictedPl-RiskData$RiskpredictedGA
### for a set of threshold values, T_N=20%, T_DF=T_GA=10%
source("DCA_Constant_Thresholds.R")
Net_Benefit
nrow(RiskData[which(RiskData$RecommendedTreatmentThreshold==1)])
nrow(RiskData[which(RiskData$RecommendedTreatmentThreshold==1),])
nrow(RiskData[which(RiskData$RecommendedTreatmentThreshold=2),])
nrow(RiskData[which(RiskData$RecommendedTreatmentThreshold==2),])
nrow(RiskData[which(RiskData$RecommendedTreatmentThreshold==3),])
nrow(RiskData[which(RiskData$RecommendedTreatmentThreshold==4),])
netmeta
net1
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("elbersb/tidylog")
library(tidylog)
library(readxl)
library(lubridate)
library(tidyverse)
DATA=read_csv("C:/Users/kc19o338/Desktop/Kosti/medical_noshows.csv")
exp(1.01)
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
library(xlsx)
library(tidyverse)
library(WriteXLS)
library(devtools)
install_github("esm-ispm-unibe-ch/NMAJags")
library(NMAJags)
library(R2jags)
library(netmeta)
library(meta)
library(metafor)
library(readxl)
library(xlsx)
library(tidyverse)
library(WriteXLS)
DATA2=read_excel("C:/Users/kc19o338/Desktop/Schizophrenia project/dataset_relapse.last.xlsx", na="99999")
DATA1<-DATA2[!is.na(DATA2$N_relapsed),]
DATA<-DATA1[!is.na(DATA1$N_randomized),]
#excludeID <-c(985, 1226, 2997, 3131, 3305, 4114, 4362, 4398, 4410, 4412, 4447, 4519, 4584, 4650)
#cat("The following IDs are excluded because of missing number of relapses:",paste("ID=", excludeID))
#DATA=DATA[!DATA$Final_ID_all%in%excludeID,]
#describe the data
tapply(DATA$N_randomized,DATA$Drug_name,sum,na.rm=T)
print(length(table(DATA$Study_name)))
#prepare the data
DATApairs=pairwise(treat=Drug_name, event=N_relapsed, n=N_randomized, data=DATA, sm="OR", studlab=Final_ID_all, allstudies = TRUE)
#run NMA and create an object called EFF for efficacy
net1<-netmeta(TE, seTE, treat1, treat2, studlab, data = DATApairs, sm = "OR", comb.random=TRUE, comb.fixed=FALSE, prediction=TRUE, ref="Placebo")
#network plot
netgraph(net1, plastic=F, thickness="number.of.studies", multiarm = F, points=T, col=1)
#forest plots
forest(net1, ref="Placebo", sortvar = -Pscore,xlab="OR")
forest(net1, ref="Placebo", xlab="OR")
forest(net1, ref="Placebo", sortvar = -Pscore,xlab="OR")
NMAdataBinary=make.jagsNMA.data(studyid=Final_ID_all,t=Drug_name,r=N_relapsed,n=N_randomized,data=DATA,type="binary",reference = "Placebo")
modelNMABinary<-function()
{
for (i in 1:ns) {
w[i, 1] <- 0
theta[i, t[i, 1]] <- 0
for (k in 1:na[i]) {
r[i, t[i, k]] ~ dbin(p[i, t[i, k]], n[i, t[i, k]])
}
logit(p[i, t[i, 1]]) <- u[i]
for (k in 2:na[i]) {
logit(p[i, t[i, k]]) <- u[i] + theta[i, t[i, k]]
theta[i, t[i, k]] ~ dnorm(md[i, t[i, k]], precd[i,
t[i, k]])
md[i, t[i, k]] <- mean[i, k] + sw[i, k]
w[i, k] <- (theta[i, t[i, k]] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
precd[i, t[i, k]] <- prec * 2 * (k - 1)/k
mean[i, k] <- d[t[i, k]] - d[t[i, 1]]
}
}
for (i in 1:ns) {
u[i] ~ dnorm(0, 0.01)
}
tau ~ dnorm(0, 1) %_% T(0, )
prec <- 1/pow(tau, 2)
tau.sq <- pow(tau, 2)
d[ref] <- 0
for (k in 1:(ref - 1)) {
d[k] ~ dnorm(0, 0.01)
}
for (k in (ref + 1):nt) {
d[k] ~ dnorm(0, 0.01)
}
for (i in 1:nt) {
for (j in 1:nt) {
OR[i, j] <- exp(d[j] - d[i])
}
}
for (j in 1:(ref - 1)) {
ORref[j] <- exp(d[j] - d[ref])
LORref[j] <- d[j] - d[ref]
}
for (j in (ref + 1):nt) {
ORref[j] <- exp(d[j] - d[ref])
LORref[j] <- d[j] - d[ref]
}
}
NMAinJAGSBinP <- jags.parallel(data = NMAdataBinary, inits = NULL,
parameters.to.save = c("ORref","tau"), n.chains = 2, n.iter = 120000,
n.burnin = 10000,DIC=F,n.thin=10,
model.file = modelNMABinary)
NMAdataBinary=make.jagsNMA.data(studyid=Final_ID_all,t=Drug_name,r=N_relapsed,n=N_randomized,data=DATA,type="binary",reference = "Placebo")
modelNMABinary<-function()
{
for (i in 1:ns) {
w[i, 1] <- 0
theta[i, t[i, 1]] <- 0
for (k in 1:na[i]) {
r[i, t[i, k]] ~ dbin(p[i, t[i, k]], n[i, t[i, k]])
}
logit(p[i, t[i, 1]]) <- u[i]
for (k in 2:na[i]) {
logit(p[i, t[i, k]]) <- u[i] + theta[i, t[i, k]]
theta[i, t[i, k]] ~ dnorm(md[i, t[i, k]], precd[i,
t[i, k]])
md[i, t[i, k]] <- mean[i, k] + sw[i, k]
w[i, k] <- (theta[i, t[i, k]] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
precd[i, t[i, k]] <- prec * 2 * (k - 1)/k
mean[i, k] <- d[t[i, k]] - d[t[i, 1]]
}
}
for (i in 1:ns) {
u[i] ~ dnorm(0, 0.01)
}
tau ~ dnorm(0, 1) %_% T(0, )
prec <- 1/pow(tau, 2)
tau.sq <- pow(tau, 2)
d[ref] <- 0
for (k in 1:(ref - 1)) {
d[k] ~ dnorm(0, 0.01)
}
for (k in (ref + 1):nt) {
d[k] ~ dnorm(0, 0.01)
}
for (i in 1:nt) {
for (j in 1:nt) {
OR[i, j] <- exp(d[j] - d[i])
}
}
for (j in 1:(ref - 1)) {
ORref[j] <- exp(d[j] - d[ref])
LORref[j] <- d[j] - d[ref]
}
for (j in (ref + 1):nt) {
ORref[j] <- exp(d[j] - d[ref])
LORref[j] <- d[j] - d[ref]
}
}
NMAinJAGSBinP <- jags.parallel(data = NMAdataBinary, inits = NULL,
parameters.to.save = c("ORref","tau"), n.chains = 2, n.iter = 120000,
n.burnin = 10000,DIC=F,n.thin=10,
model.file = modelNMABinary)
