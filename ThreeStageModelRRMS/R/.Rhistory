n.chains=2,n.iter = 100000,n.burnin = 1000,DIC=F,n.thin = 10)
print(IPDNMRJAGSmodel)
View(IPDNMRJAGSmodel)
IPDNMRJAGSmodel$mean$logitp
IPDNMRJAGSmodel$BUGSoutput$mean$logitp
View(IPDNMRJAGSmodel)
View(IPDNMRJAGSmodel)
IPDNMRJAGSmodel$BUGSoutput$mean$logitp
p<-IPDNMRJAGSmodel$BUGSoutput$mean$logitp
View(p)
View(p)
p<-expit(IPDNMRJAGSmodel$BUGSoutput$mean$logitp)
p
DF<-cbind(Risknew,p[,1])
DF
DF$Treatment<-1
colnames(DF)<-c("Risknew","prelapse","Treatment")
##For Glatiramer acetate - Risk & propability to relapse
GA<-cbind(Risknew,p[,2])
GA$Treatment<-2
colnames(GA)<-c("Risknew","prelapse","Treatment")
##For Natalizumab - Risk & propability to relapse
N<-cbind(Risknew,p[,3])
N$Treatment<-3
colnames(N)<-c("Risknew","prelapse","Treatment")
##For Placebo - Risk & propability to relapse
Pl<-cbind(Risknew,p[,4])
Pl$Treatment<-4
colnames(Pl)<-c("Risknew","prelapse","Treatment")
##merge data for all the treatments
Graphdata<-rbind(DF,GA,N,Pl)
##merge data for all the treatments
Graphdata<-rbind(DF,GA,N,Pl)
ggplot(data=Graphdata, aes(x=Risknew, y=prelapse, group=Treatment)) +
geom_line()+
geom_point()
IPDplot<-ggplot(Graphdata, aes(x=Risknew, y=prelapse, group=Treatment)) +
geom_line(aes(color=Treatment))+
geom_point(aes(color=Treatment))
IPDplot
#run the model & results - it needs some time (around 5 minutes)
IPDNMRJAGSmodel <- jags.parallel(data = jagsdataIPDNMR ,inits=NULL,parameters.to.save = c('be', 'Beta', 'ORref', 'logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 100000,n.burnin = 1000,DIC=F,n.thin = 10)
View(IPDNMRJAGSmodel)
View(IPDNMRJAGSmodel)
print(IPDNMRJAGSmodel)
###predicted risk= expit(logit p risk)
expit<-function(x) {exp(x)/(1+exp(x))}
p<-IPDNMRJAGSmodel$BUGSoutput$mean$logitp
p<-expit(IPDNMRJAGSmodel$BUGSoutput$mean$logitp)
####preperation for the graph
DF<-cbind(Risknew,p[,1])
DF$Treatment<-1
colnames(DF)<-c("Risknew","prelapse","Treatment")
##For Glatiramer acetate - Risk & propability to relapse
GA<-cbind(Risknew,p[,2])
GA$Treatment<-2
colnames(GA)<-c("Risknew","prelapse","Treatment")
##For Natalizumab - Risk & propability to relapse
N<-cbind(Risknew,p[,3])
N$Treatment<-3
colnames(N)<-c("Risknew","prelapse","Treatment")
##For Placebo - Risk & propability to relapse
Pl<-cbind(Risknew,p[,4])
Pl$Treatment<-4
colnames(Pl)<-c("Risknew","prelapse","Treatment")
##merge data for all the treatments
Graphdata<-rbind(DF,GA,N,Pl)
###Graph for IPD
ggplot(data=Graphdata, aes(x=Risknew, y=prelapse, group=Treatment)) +
geom_line()+
geom_point()
IPDplot<-ggplot(Graphdata, aes(x=Risknew, y=prelapse, group=Treatment)) +
geom_line(aes(color=Treatment))+
geom_point(aes(color=Treatment))
IPDplot
IPDNMRJAGSmodel$BUGSoutput$mean$logitp
expit(-12)
logitmeanRisknew
logitRisknew<-NA
logitRisknew<-as.data.frame(logitRisknew)
for (i in 1:99) {
logitRisknew[i,1]<-logit(Risknew[i,1])
}
logitRisknew<-as.data.frame(logitRisknew)
logitmeanRisknew<-mean(logitRisknew[,1])
logitmeanRisknew
###data for jagsmodel with metarigression on logit of Risk
jagsdataIPDNMR <- list(
Nstudies=3,
Np=sum(as.numeric(table(as.numeric(as.factor(RiskData$STUDYID))))),
studyid=as.numeric(RiskData$STUDYID),
outcome=RiskData$RELAPSE2year,
outcomeP=PlaceboArms$Relapse2year,
NpPlacebo=nrow(PlaceboArms),
treat= rbind(c(1,4,NA),c(1,2,4),c(3,4,NA)),
na=c(2,3,2),
logitRisknew=logitRisknew,
logitmeanRisknew=logitmeanRisknew,
arm=RiskData$arm,
Risk=RiskData$logitRisk,
meanRisk=c(-0.5360,-0.6501,-0.5110), ##here is the mean of logit of risk
nt=4,
ref=4
)
#run the model & results - it needs some time (around 5 minutes)
IPDNMRJAGSmodel <- jags.parallel(data = jagsdataIPDNMR ,inits=NULL,parameters.to.save = c('be', 'Beta', 'ORref', 'logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 100000,n.burnin = 1000,DIC=F,n.thin = 10)
sink("Results of IPD NMR.txt")
pdf("Results of IPD NMR.txt")
pdf("Results of IPD NMR.pdf")
###predicted risk= expit(logit p risk)
expit<-function(x) {exp(x)/(1+exp(x))}
p<-IPDNMRJAGSmodel$BUGSoutput$mean$logitp
p<-expit(IPDNMRJAGSmodel$BUGSoutput$mean$logitp)
####preperation for the graph
DF<-cbind(Risknew,p[,1])
DF$Treatment<-1
colnames(DF)<-c("Risknew","prelapse","Treatment")
##For Glatiramer acetate - Risk & propability to relapse
GA<-cbind(Risknew,p[,2])
GA$Treatment<-2
colnames(GA)<-c("Risknew","prelapse","Treatment")
##For Natalizumab - Risk & propability to relapse
N<-cbind(Risknew,p[,3])
N$Treatment<-3
colnames(N)<-c("Risknew","prelapse","Treatment")
##For Placebo - Risk & propability to relapse
Pl<-cbind(Risknew,p[,4])
Pl$Treatment<-4
colnames(Pl)<-c("Risknew","prelapse","Treatment")
##merge data for all the treatments
Graphdata<-rbind(DF,GA,N,Pl)
###Graph for IPD
ggplot(data=Graphdata, aes(x=Risknew, y=prelapse, group=Treatment)) +
geom_line()+
geom_point()
IPDplot<-ggplot(Graphdata, aes(x=Risknew, y=prelapse, group=Treatment)) +
geom_line(aes(color=Treatment))+
geom_point(aes(color=Treatment))
IPDplot
IPDplot
logitmeanRisknew
logitmeanRisknew
print(IPDNMRJAGSmodel)
#run the model & results - it needs some time (around 5 minutes)
IPDNMRJAGSmodel <- jags.parallel(data = jagsdataIPDNMR ,inits=NULL,parameters.to.save = c('be', 'Beta', 'ORref', 'logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 100000,n.burnin = 1000,DIC=F,n.thin = 10)
View(IPDNMRJAGSmodel)
View(IPDNMRJAGSmodel)
print(IPDNMRJAGSmodel)
# traceplots
traceplot(IPDNMRJAGSmodel$BUGSoutput)
################# Script for Plot of predicted Risk #########################
###predicted risk= expit(logit p risk)
expit<-function(x) {exp(x)/(1+exp(x))}
p<-IPDNMRJAGSmodel$BUGSoutput$mean$logitp
p<-expit(IPDNMRJAGSmodel$BUGSoutput$mean$logitp)
####preperation for the graph
DF<-cbind(Risknew,p[,1])
DF$Treatment<-1
colnames(DF)<-c("Risknew","prelapse","Treatment")
##For Glatiramer acetate - Risk & propability to relapse
GA<-cbind(Risknew,p[,2])
GA$Treatment<-2
colnames(GA)<-c("Risknew","prelapse","Treatment")
##For Natalizumab - Risk & propability to relapse
N<-cbind(Risknew,p[,3])
N$Treatment<-3
colnames(N)<-c("Risknew","prelapse","Treatment")
##For Placebo - Risk & propability to relapse
Pl<-cbind(Risknew,p[,4])
Pl$Treatment<-4
colnames(Pl)<-c("Risknew","prelapse","Treatment")
##merge data for all the treatments
Graphdata<-rbind(DF,GA,N,Pl)
###Graph for IPD
ggplot(data=Graphdata, aes(x=Risknew, y=prelapse, group=Treatment)) +
geom_line()+
geom_point()
IPDplot<-ggplot(Graphdata, aes(x=Risknew, y=prelapse, group=Treatment)) +
geom_line(aes(color=Treatment))+
geom_point(aes(color=Treatment))
IPDplot
pdf("Results of IPD NMR.pdf")
IPDplot
pdf("Plot IPD NMR.pdf")
##remove list
rm(list=ls())
############################ IPD NMR Bayesian Model ###########################3
modelIPDNMR<-function(){
###likelihood
for (i in 1:Np){
outcome[i]~dbern(p[i])
###formula
logit(p[i])<-u[studyid[i]] + delta[studyid[i], arm[i]] + beta[studyid[i]]*(Risk[i]-meanRisk[studyid[i]]) + beta.eff[studyid[i],arm[i]]*(Risk[i]-meanRisk[studyid[i]])
}
###fixed effects for u[i]
for (i in 1:Nstudies){
u[i]~dnorm(0,0.001)
beta[i]<-Beta
}
Beta~dnorm(0,0.001)
#####treatment effect - random effects
for(i in 1:Nstudies){
delta[i,trat[i,1] <- 0
w[i,1] <- 0
beta.eff[i,1]<-0
for(k in 2:na[i]){
delta[i,treat[i,k]]<-md[i, treat[i,k]]
md[i, treat[i,k]] <- mean[i, k] + sw[i, k]
w[i, k] <- (delta[i, treat[i,k]] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
mean[i, k] <- d[treat[i, k]] - d[treat[i, 1]]
beta.eff[i,k]<-be[treat[i,k]]-be[treat[i,1]]
}
}
###priors
d[ref] <- 0 # treatment effect is zero for reference treatment = PLACEBO
be[ref] <- 0
for (k in 1:(ref-1)){
d[k] ~ dnorm(0, 0.01)
be[k] ~ dnorm(0, 0.01)
}
for (k in (ref+1):nt){
d[k] ~ dnorm(0, 0.01)
be[k] ~ dnorm(0, 0.01)
}
###odds for placebo arm via the placebo arm dataset
for (i in 1:NpPlacebo){
outcomeP[i]~dbern(pplacebo[i])
###formula
logit(pplacebo[i])<-logitpplacebo
}
#prior for logitpplacebo
logitpplacebo~dnorm(0,0.01)
for(j in 1:nt){ORref[j]<- exp(d[j] - d[ref])}
##### calculation of predicted risk to patients
for (i in 1:99){
for(j in 1:nt){
logitp[i,j]<-logitpplacebo+ d[j]+ Beta*(logitRisknew[i,1]-logitmeanRisknew)+ be[j]*(logitRisknew[i,1]-logitmeanRisknew)
}
}
#for (i in 1:99){
# for(j in 1:nt){
#  p[i,j]<-exp(logitp[i,j])/(1+exp(logitp[i,j]))
#}
}
###load the needed libraries
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
install_github("htx-r/NMAPredictionsRiskModel", force = TRUE)
library(NMAPredictionsRiskModel)
library(CleaningData)
library(R2jags)
library(dplyr)
library(glmpath)
library(readxl)
library(car)
library(glmnet)
library(Hmisc)
library(rms)
library(gridExtra)
library(ggpubr)
library(ggplot2)
library(synthpop)
library(pmsampsize)
library(selectiveInference)
library(plyr)
library(vcd)
library(pROC)
###### Give your path of data
mydatapath="C:/Users/kc19o338/Desktop/Real world predictions project/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/Real world predictions project/HTx/data cleaning"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
cleanBIOGENtrials<-cleanBIOGENtrials.fun(mydatapath)
PlaceboArms<-cleanPLACEBOtrials.fun(mydatapath1)
adsl01<-cleanBIOGENtrials$adsl01
###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
adsl<-adsl01[adsl01$STUDYID!="SENTINEL" & adsl01$STUDYID!="ADVANCE" ,]
### Select variables that I need- exclude variables with a huge ammount of missing values (more than 50%),
#exclude factors with just one category, exclude factors that are transformations from already existing variables)
#exclude highly correlated variables
###and recode them in numerical values (e.g. Male=1, Female=0)
## transformations of continuous variables to approximate normal distribution
MSrelapse<-numericalDataRisk.fun(adsl)  ##final full dataset
#######################################################################################
############################ STAGE 1 - RISK MODEL ###############################################
######################################################################################
source('EPVandSampleSize.R')
######## Model 1 - results of LASSO model
LASSOModel<-RiskModels.fun(MSrelapse,"LASSOModel")
#########  Model 2 - Results of Pellegrini's model
FabioModel<-RiskModels.fun(MSrelapse,"FabioModel")
source('C:/Users/kc19o338/Desktop/Real world predictions project/NMAPedictionsRiskModel/RiskData.R')
source('C:/Users/kc19o338/Desktop/Real world predictions project/NMAPedictionsRiskModel/DataForIPDNMR.R')
#run the model & results - it needs some time (around 5 minutes)
IPDNMRJAGSmodelLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('be', 'logitpplacebo','Beta', 'ORref','d','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 100000,n.burnin = 1000,DIC=F,n.thin = 10)
############################ IPD NMR Bayesian Model ###########################3
modelIPDNMR<-function(){
###likelihood
for (i in 1:Np){
outcome[i]~dbern(p[i])
###formula
logit(p[i])<-u[studyid[i]] + delta[studyid[i], arm[i]] + beta[studyid[i]]*(Risk[i]-meanRisk[studyid[i]]) + beta.eff[studyid[i],arm[i]]*(Risk[i]-meanRisk[studyid[i]])
}
###fixed effects for u[i]
for (i in 1:Nstudies){
u[i]~dnorm(0,0.001)
beta[i]<-Beta
}
Beta~dnorm(0,0.001)
#####treatment effect - random effects
for(i in 1:Nstudies){
delta[i,trat[i,1] <- 0
w[i,1] <- 0
beta.eff[i,1]<-0
for(k in 2:na[i]){
delta[i,treat[i,k]]<-md[i, treat[i,k]]
md[i, treat[i,k]] <- mean[i, k] + sw[i, k]
w[i, k] <- (delta[i, treat[i,k]] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
mean[i, k] <- d[treat[i, k]] - d[treat[i, 1]]
beta.eff[i,k]<-be[treat[i,k]]-be[treat[i,1]]
}
}
###priors
d[ref] <- 0 # treatment effect is zero for reference treatment = PLACEBO
be[ref] <- 0
for (k in 1:(ref-1)){
d[k] ~ dnorm(0, 0.01)
be[k] ~ dnorm(0, 0.01)
}
for (k in (ref+1):nt){
d[k] ~ dnorm(0, 0.01)
be[k] ~ dnorm(0, 0.01)
}
###odds for placebo arm via the placebo arm dataset
for (i in 1:NpPlacebo){
outcomeP[i]~dbern(pplacebo[i])
###formula
logit(pplacebo[i])<-logitpplacebo
}
#prior for logitpplacebo
logitpplacebo~dnorm(0,0.01)
for(j in 1:nt){ORref[j]<- exp(d[j] - d[ref])}
##### calculation of predicted risk to patients
for (i in 1:99){
for(j in 1:nt){
logitp[i,j]<-logitpplacebo+ d[j]+ Beta*(logitRisknew[i,1]-logitmeanRisknew)+ be[j]*(logitRisknew[i,1]-logitmeanRisknew)
}
}
#for (i in 1:99){
# for(j in 1:nt){
#  p[i,j]<-exp(logitp[i,j])/(1+exp(logitp[i,j]))
#}
}
############################ IPD NMR Bayesian Model ###########################3
modelIPDNMR<-function(){
###likelihood
for (i in 1:Np){
outcome[i]~dbern(p[i])
###formula
logit(p[i])<-u[studyid[i]] + delta[studyid[i], arm[i]] + beta[studyid[i]]*(Risk[i]-meanRisk[studyid[i]]) + beta.eff[studyid[i],arm[i]]*(Risk[i]-meanRisk[studyid[i]])
}
###fixed effects for u[i]
for (i in 1:Nstudies){
u[i]~dnorm(0,0.001)
beta[i]<-Beta
}
Beta~dnorm(0,0.001)
#####treatment effect - random effects
for(i in 1:Nstudies){
delta[i,trat[i,1] <- 0
w[i,1] <- 0
beta.eff[i,1]<-0
for(k in 2:na[i]){
delta[i,treat[i,k]]<-md[i, treat[i,k]]
md[i, treat[i,k]] <- mean[i, k] + sw[i, k]
w[i, k] <- (delta[i, treat[i,k]] - mean[i, k])
sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)
mean[i, k] <- d[treat[i, k]] - d[treat[i, 1]]
beta.eff[i,k]<-be[treat[i,k]]-be[treat[i,1]]
}
}
###priors
d[ref] <- 0 # treatment effect is zero for reference treatment = PLACEBO
be[ref] <- 0
for (k in 1:(ref-1)){
d[k] ~ dnorm(0, 0.01)
be[k] ~ dnorm(0, 0.01)
}
for (k in (ref+1):nt){
d[k] ~ dnorm(0, 0.01)
be[k] ~ dnorm(0, 0.01)
}
###odds for placebo arm via the placebo arm dataset
for (i in 1:NpPlacebo){
outcomeP[i]~dbern(pplacebo[i])
###formula
logit(pplacebo[i])<-logitpplacebo
}
#prior for logitpplacebo
logitpplacebo~dnorm(0,0.01)
for(j in 1:nt){ORref[j]<- exp(d[j] - d[ref])}
##### calculation of predicted risk to patients
for (i in 1:99){
for(j in 1:nt){
logitp[i,j]<-logitpplacebo+ d[j]+ Beta*(logitRisknew[i,1]-logitmeanRisknew)+ be[j]*(logitRisknew[i,1]-logitmeanRisknew)
}
}
#for (i in 1:99){
# for(j in 1:nt){
#  p[i,j]<-exp(logitp[i,j])/(1+exp(logitp[i,j]))
#}
}
source('C:/Users/kc19o338/Desktop/Real world predictions project/NMAPedictionsRiskModel/R/modelIPDNMR.R')
source('C:/Users/kc19o338/Desktop/Real world predictions project/NMAPedictionsRiskModel/R/modelIPDNMR.R')
source('C:/Users/kc19o338/Desktop/Real world predictions project/NMAPedictionsRiskModel/R/modelIPDNMR.R')
#run the model & results - it needs some time (around 5 minutes)
IPDNMRJAGSmodelLASSO <- jags.parallel(data = jagsdataIPDNMRLASSO,inits=NULL,parameters.to.save = c('be', 'logitpplacebo','Beta', 'ORref','d','u','logitp'),model.file = modelIPDNMR,
n.chains=2,n.iter = 100000,n.burnin = 1000,DIC=F,n.thin = 10)
source('C:/Users/kc19o338/Desktop/Real world predictions project/NMAPedictionsRiskModel/R/modelIPDNMR.R')
##remove list
rm(list=ls())
##########################################################
############### LIBRARIES #################################
### Load needed variables
library(readxl)
library(dplyr)
library(rms)
#library(gee)
library(lme4)
library(R2jags)
library(vcd) #for LASSO data
library(glmnet) #for LASSO model
library(mitml)
library(jomo)
library(xlsx)
library(ggpubr)
library(gridExtra)
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
library(CleaningData)
library(pROC)
# give/change your datapath (the datapath that includes the data)
mydatapath="C:/Users/kc19o338/Desktop/SMSC Basel"
########################## DATASET NEEDED FOR THE PRE-SPECIFIED PROGNOSTIC MODEL ##############################
# function that keeps only the needed variables (selected via pre-existing prognostic models on the literature, for RRMS patients)
# and makses the proper transformations for continues and categorical variables
# (in case you want to see all summary statistics for the SMSC data before and after the transformations you can run the SMSC_Summary.R script)
source("R/FinalDataSMSC.fun.R")
SMSCdata<-FinalDataSMSC.fun(mydatapath)
FinalDataSMSC.fun=function(datapath){
## Read the IPD SMSC data
# path and loading the data
SMSCpath=paste(datapath,"/SMSC_phase1_cycles.xlsx",sep="")
SMSCdata <- read_excel(SMSCpath)
#keep only needed variables, based on the literature and pre-existing prognostic models on relapses for RRMS patients
tokeep<-c("unique.visit.id" , "patient.id", "age", "gender","edss", "disease.duration","treatment.naive.prior.visit", "months.since.last.relapse", "nr.relapses.2y.prior.study",
"nr.Gd.enhanced.lesions","treatment.during.cycle","treatment.time.during.cycle.months","relapse.2y.after.study")
SMSCdata <- SMSCdata[,(names(SMSCdata) %in% tokeep)]
######## Needed transformations for CONTINUOUS variables to approximate the normal distribution #####################
# disease duration in transformed to log(disease duration +10)
SMSCdata$disease.duration<-log(SMSCdata$disease.duration+10)
# months since last relapse relapse is transformed to log(months since last relapse +10)
SMSCdata$months.since.last.relapse<-log(SMSCdata$months.since.last.relapse+10)
######## Needed transformations for CATEGORICAL variables #####################
# GD enhanced lessions, instead of 0, 1, ..., 18 now we will have 0 and >0
SMSCdata$nr.Gd.enhanced.lesions[which(SMSCdata$nr.Gd.enhanced.lesions>0)]<-1
SMSCdata$nr.Gd.enhanced.lesions<-as.factor(SMSCdata$nr.Gd.enhanced.lesions)
# Number of relapses 2 years prior to study, instead of 0, 1, ..., 6 now we will have 0 and 1 and >1
SMSCdata$nr.relapses.2y.prior.study[which(SMSCdata$nr.relapses.2y.prior.study>1)]<-2
SMSCdata$nr.relapses.2y.prior.study<-as.factor(SMSCdata$nr.relapses.2y.prior.study)
## treatment during cycle 0 for no and 1 for yes
SMSCdata$treatment.naive.prior.visit[which(SMSCdata$treatment.naive.prior.visit==FALSE)]<-0
SMSCdata$treatment.naive.prior.visit[which(SMSCdata$treatment.naive.prior.visit==TRUE)]<-1
SMSCdata$treatment.naive.prior.visit<-as.factor(SMSCdata$treatment.naive.prior.visit)
### gender 0 for men and 1 for women
SMSCdata$gender[which(SMSCdata$gender=="Men")]<-0
SMSCdata$gender[which(SMSCdata$gender=="Women")]<-1
SMSCdata$gender<-as.factor(SMSCdata$gender)
### treatment during cycle 0 for no and 1 for yes
SMSCdata$treatment.during.cycle[which(SMSCdata$treatment.during.cycle=="No")]<-0
SMSCdata$treatment.during.cycle[which(SMSCdata$treatment.during.cycle=="Yes")]<-1
SMSCdata$treatment.during.cycle<-as.factor(SMSCdata$treatment.during.cycle)
##make a numeric outcome
SMSCdata$outcome<-NA
SMSCdata$outcome[which(SMSCdata$relapse.2y.after.study=="Yes")]<-1
SMSCdata$outcome[which(SMSCdata$relapse.2y.after.study=="No")]<-0
SMSCdata$outcome<-as.factor(SMSCdata$outcome)
todrop<-c("relapse.2y.after.study")
SMSCdata <- SMSCdata[,!(names(SMSCdata) %in% todrop)]
# treatment time during cycle should be zero when treatment during cycle is 0
SMSCdata$treatment.time.during.cycle.months[which(SMSCdata$treatment.during.cycle==0)]<-0
SMSCdata$treatment.time.during.cycle.monthsFactor<-NA
SMSCdata$treatment.time.during.cycle.monthsFactor<-SMSCdata$treatment.time.during.cycle.months
SMSCdata$treatment.time.during.cycle.monthsFactor[which(SMSCdata$treatment.time.during.cycle.monthsFactor<9)]<-0
SMSCdata$treatment.time.during.cycle.monthsFactor[which(SMSCdata$treatment.time.during.cycle.monthsFactor>=9)]<-1
SMSCdata$treatment.time.during.cycle.monthsFactor<-as.factor(SMSCdata$treatment.time.during.cycle.monthsFactor)
return(SMSCdata)
}
SMSCdata<-FinalDataSMSC.fun(mydatapath)
summary(SMSCdata$nr.Gd.enhanced.lesions)
745/1752
help(jomoImpute)
testEstimates
testEstimates()
help(testEstimates)
