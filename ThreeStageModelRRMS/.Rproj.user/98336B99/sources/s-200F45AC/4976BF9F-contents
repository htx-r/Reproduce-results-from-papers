
BootstrapValidation.fun <- function(data, samples, alpha, model1, model2, model3 ){
  resultselasticnet <- matrix(nrow = samples,ncol = 6) # table for the final results of elasticnet model
  results2 <- matrix(nrow = samples,ncol = 6) # table for the final results of specified lrm model
  set.seed(231398)
  for (i in 1:samples) {
    samp_index <- sample(1:nrow(data), nrow(data), rep=TRUE) # create a sampling index vector
    
    bs_samp <- data[samp_index,] # index the orignal dataset using the sampling vector to give the bs sample
    bs_samp_modelMatrix<-model.matrix(bs_samp$RELAPSE2year~.-1,data=bs_samp) #model matrix for the elasticnet
    bs_samp_modelMatrix<-bs_samp_modelMatrix[,-2]
    ################################ Model  Elastic net##############################
    cv.fit.both<-cv.glmnet(x=bs_samp_modelMatrix, y=bs_samp$RELAPSE2year, alpha=alpha, family="binomial",type.measure = "auc")
    cv.coef.both<-coef(cv.fit.both,s="lambda.1se")
    elasticnetcoef<-as.matrix(cv.coef.both)
    finalmodel<-lrm(RELAPSE2year~.,x=TRUE,y=TRUE,linear.predictors = T,data=bs_samp)
    elasticnetmodel<-finalmodel
    for (j in 1:(finalmodel[["stats"]][["d.f."]]+1)){
      elasticnetmodel$coefficients[j]<-elasticnetcoef[j]
    }
    
    modelelasticnet<-elasticnetmodel
    lp_bselasticnet <- predict(modelelasticnet) # predict lp from the bootstrap model in the bs sample
    pr_bselasticnet <- exp(lp_bselasticnet)/(1+exp(lp_bselasticnet))# predict probabilities from the bootstrap model in the bs sample
    
    lp_testelasticnet<- predict(modelelasticnet, newdata = data) # predict lp from the bootstrap model in the original sample
    pr_testelasticnet<-exp(lp_testelasticnet)/(1+exp(lp_testelasticnet))# predict probabilities from the bootstrap model in the original sample
    
    # calculate the apparent performance of the bootstrap model in the bs sample
    app_cstat_modelelasticnet <- roc(RELAPSE2year~pr_bselasticnet,data=bs_samp)
    resultselasticnet[i,1] <- as.numeric(app_cstat_modelelasticnet$auc)
    app_citl_modelelasticnet <- glm(RELAPSE2year ~ offset(lp_bselasticnet),family=binomial, data=bs_samp)
    resultselasticnet[i,2] <- summary(app_citl_modelelasticnet)$coefficients[1,1]
    app_cslope_modelelasticnet <- glm(RELAPSE2year ~ lp_bselasticnet,family=binomial(link='logit'), data=bs_samp)
    resultselasticnet[i,3] <- summary(app_cslope_modelelasticnet)$coefficients[2,1]
    
    # calculate the test performance of the bootstrap model in the original sample
    test_cstat_modelelasticnet <- roc(RELAPSE2year~pr_testelasticnet,data=data)
    resultselasticnet[i,4] <- test_cstat_modelelasticnet$auc
    test_citl_modelelasticnet <- glm(RELAPSE2year ~ offset(lp_testelasticnet),family=binomial, data=data)
    resultselasticnet[i,5] <- summary(test_citl_modelelasticnet)$coefficients[1,1]
    test_cslope_modelelasticnet<- glm(RELAPSE2year ~ lp_testelasticnet,family=binomial, data=data)
    resultselasticnet[i,6] <- summary(test_cslope_modelelasticnet)$coefficients[2,1]
    
    ##################### Specified Model ####################################################
    
    model2<-lrm(RELAPSE2year~AGE+SEX+EDSSBL+ONSYRS+RACE+RLPS1YR+TRELMOS+PRMSGR+T25FWABL+NHPTMBL+PASATABL+VFT25BL+SFPCSBL+SFMCSBL,x=TRUE,y=TRUE,linear.predictors = TRUE,data=bs_samp)
    penalized	<-  pentrace(model2, seq(0,200,0.1))
    model2 <- update (model2, penalty=penalized$penalty)
    
    lp_bs2<- predict(model2) # predict lp from the bootstrap model in the bs sample
    pr_bs2 <- exp(lp_bs2)/(1+exp(lp_bs2))# predict probabilities from the bootstrap model in the bs sample
    
    lp_test2 <- predict(model2, newdata = data) # predict lp from the bootstrap model in the original sample
    pr_test2<-exp(lp_test2)/(1+exp(lp_test2))# predict probabilities from the bootstrap model in the original sample
    
    # calculate the apparent performance of the bootstrap model in the bs sample
    app_cstat_model2<- roc(RELAPSE2year~pr_bs2,data=bs_samp)
    results2[i,1] <- as.numeric(app_cstat_model2$auc)
    app_citl_model2<- glm(RELAPSE2year ~ offset(lp_bs2),family=binomial, data=bs_samp)
    results2[i,2] <- summary(app_citl_model2)$coefficients[1,1]
    app_cslope_model2 <- glm(RELAPSE2year ~ lp_bs2,family=binomial(link='logit'), data=bs_samp)
    results2[i,3] <- summary(app_cslope_model2)$coefficients[2,1]
    
    
    # calculate the test performance of the bootstrap model in the original sample
    test_cstat_model2 <- roc(RELAPSE2year~pr_test2,data=data)
    results2[i,4] <- test_cstat_model2$auc
    test_citl_model2 <- glm(RELAPSE2year ~ offset(lp_test2),family=binomial, data=data)
    results2[i,5] <- summary(test_citl_model2)$coefficients[1,1]
    test_cslope_model2 <- glm(RELAPSE2year ~ lp_test2,family=binomial, data=data)
    results2[i,6] <- summary(test_cslope_model2)$coefficients[2,1]
    
    
    
    ########################################################################################
    
    
  } 
  results2elasticnet <- as.data.frame(resultselasticnet) #tables of results
  results2model2 <- as.data.frame(results2)
  colnames(results2elasticnet) <- c("app_c_stat","app_citl","app_c_slope","test_c_stat","test_citl","test_c_slope")
  colnames(results2model2) <- c("app_c_stat","app_citl","app_c_slope","test_c_stat","test_citl","test_c_slope")
  
    


  
  lpF<- predict(modelSpecific) # predict lp from the original specified model in the original data
  prF <- exp(lpF)/(1+exp(lpF))# predict probabilities from the original specified model in the original data
  
  
  appF<-roc(RELAPSE2year~prF, data=data1)
  apparent_dis_modelSpecific<-as.numeric(appF$auc) # apparent c-index of specified model
  C_index_correctedmodelSpecific<-apparent_dis_modelSpecific - (mean(results2model2$app_c_stat)-mean(results2model2$test_c_stat)) # c-index optimism corrected
  app_cslopeF <- glm(RELAPSE2year ~ lpF,family=binomial(link='logit'), data=data1)
  apparent_cal_modelSpecific<- summary(app_cslopeF)$coefficients[2,1] #apparent calibration-slope of specified model
  Calibration_slope_correctedmodelSpecific<-apparent_cal_modelSpecific- (mean(results2model2$app_c_slope)-mean(results2model2$test_c_slope)) # c-slope optimism corrected
  


Internal_validation<-BootstrapValidation.fun(data=data1, samples = 500, alpha = 1, model1 = lp2, model2 =lp3 ,model3 = )
lp4<-for (i in 1:9) {
  fit4 <- lrm.fit (y=full$y, x=cbind (full$x[,i],  lp1))
  print(fit4)
} 


Discrimination_Calibration<-as.data.frame(Internal_validation[[7]])
Discrimination_Calibration### bootstrap optimism corrected discriminatio and calibration of the models
  


RiskData<-RCTs
mean(RiskData$relapse.2y.after.study)
mean(RiskData$Risk)

#method1
#the original with no changes - use logitp and Risk
app_cstat_model <- roc(outcome~logitp,data=RiskData)
app_cstat_model$auc #0.5772

lp1<-RiskData$logitp
#method 2
#Updating of the intercept Î± only

lp2 <- lrm.fit (y=RiskData$outcome, offset=RiskData$logitp)
RiskData$logitp2<-RiskData$logitp+lp2$linear.predictors
app_cstat_model2 <- roc(outcome~logitp2,data=RiskData)
app_cstat_model2$auc #0.5763
glm(outcome~logitp2,family="binomial",data=RiskData) #c-intercept=-0.09, c-slope=0.84
RiskData$Risknew2<-exp(RiskData$logitp2)/(1+exp(RiskData$logitp2))


#method3 - update of the intercept and the slope
lp3 <- lrm.fit (y=RiskData$outcome, x=RiskData$logitp)
RiskData$logitp3<-coef(lp3)[1]+coef(lp3)[2]*RiskData$logitp
app_cstat_model3 <- roc(outcome~logitp3,data=RiskData)
app_cstat_model3$auc #0.5763
glm(outcome~logitp3,family="binomial",data=RiskData) #c-intercept=0.0, c-slope=1
RiskData$Risknew3<-exp(RiskData$logitp3)/(1+exp(RiskData$logitp3))


full <- lrm(outcome~age+disease.duration+edss+nr.Gd.enhanced.lesions+nr.relapses.2y.prior.study1+nr.relapses.2y.prior.study2+months.since.last.relapse+treatment.naive.prior.visit+gender,data=RiskData, x=T, y=T)
#method 4 - recalibration and selective re-estimation
for (i in 1:9) {
  fit4 <- lrm.fit (y=full$y, x=cbind (full$x[,i],  lp1))
  print(fit4)
} # some printing of results of fit4
#1,3,4,8
fit4 <- lrm.fit (y=full$y, x=cbind ( lp3$linear.predictors,full$x[,3],full$x[,4],full$x[,8]))
lp4<-coef(fit4)[1]+coef(fit4)[2]*lp3$linear.predictors+coef(fit4)[3]*RiskData$edss+coef(fit4)[4]*RiskData$nr.Gd.enhanced.lesions+coef(fit4)[5]*RiskData$treatment.naive.prior.visit
RiskData$logitp4<-lp4
app_cstat_model4 <- roc(outcome~logitp4,data=RiskData)
app_cstat_model4$auc #0.61
glm(outcome~logitp4,family="binomial",data=RiskData) #c-intercept=0.0, c-slope=1


RiskData$Risknew4<-exp(RiskData$logitp4)/(1+exp(RiskData$logitp4))

summary(RiskData$Risknew4)

