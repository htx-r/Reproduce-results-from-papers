############################################################
#         Master analysis for MS NMA Prediction MODEL
#     with SMSC observational study - repeated measures
#               Generalized mixed effects model
############################################################



##########################################################
############### LIBRARIES #################################
### Load needed variables
library(readxl)
library(dplyr)
library(rms)
#library(gee)
library(lme4)
library(R2jags)
library(vcd)
library(glmnet)
library(mitml)
library(jomo)
library(xlsx)
library(ggpubr)
library(gridExtra)
library(devtools)
install_github("htx-r/CleaningData",force=TRUE)
library(CleaningData)
library(pROC)
library(pmsampsize)
library(plyr)
library(meta)
library(netmeta)
library(tidyverse)

##############################################################################################################################
######################## STAGE 1 - DEVELOPMENT AND VALIDATION OF THE PROGNOSTIC MODEL  ########################
###############################             USING OBSERVATIONAL DATA            ################################3
###############################################################################################################

# give/change your datapath (the datapath that includes the data)
mydatapath="C:/Users/kc19o338/Desktop/SMSC"

########################## DATASET NEEDED FOR THE PRE-SPECIFIED PROGNOSTIC MODEL ##############################
# function that keeps only the needed variables (selected via pre-existing prognostic models on the literature, for RRMS patients)
# and makses the proper transformations for continues and categorical variables
# (in case you want to see all summary statistics for the SMSC data before and after the transformations you can run the SMSC_Summary.R script)
source("R/FinalDataSMSC.fun.R")
SMSCdata<-FinalDataSMSC.fun(mydatapath)
# the dataset with complete cases only, no missing values at all
SMSCdataC<-na.omit(SMSCdata)


############################ Frequentist framework ######################################################################
# just a test using generalized linear mixed effects model in a frequentist setting

source("Frequentist_glmm.R")

#the results of the mixed-effects model
summary(glmer_out)
# compare them with a model with fixed effects only (glm)
summary(glm_out)

#check the correlations between the categorical variables
#assocstats(table(SMSCdata_glmer$nr.Gd.enhanced.lesions,SMSCdata_glmer$nr.relapses.2y.prior.study))
#assocstats(table(SMSCdata_glmer$nr.Gd.enhanced.lesions,SMSCdata_glmer$treatment.naive.prior.visit))
#t.test(SMSCdata_glmer$months.since.last.relapse[which(SMSCdata_glmer$nr.Gd.enhanced.lesions==0)], SMSCdata_glmer$months.since.last.relapse[which(SMSCdata_glmer$nr.Gd.enhanced.lesions==1)])
#we can see that Nr.Gd enhanced.lessions is associated with nr.relapses.prior.study, treatment.naive.prior.visit and months.since.last.relapse

#check if resstricted cubic splines are needed
source("Check_rcs.R")
anova(glm_rcs) #it seems that there is no variable with non-linear relationhip

############################ Bayesian framework ######################################################################

##### Read the data needed for the jags model
source("DataJagsPrM.R")
#source the jags model
source("R/jagsmodelSMSC.R")
# give initial values for the jags model
jags.inits <- function(){
  list("b"=c(0,0,0,0,0,0,0,0,0,0,0),"sigma"=0.02,"rho"=0.4)
}
# run the jugs model
set.seed(2000)
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits= jags.inits,
                                 parameters.to.save = c('b','sigma', 'rho' ),model.file = jagsmodelSMSC,
                                 n.chains=2,n.iter = 50000,n.burnin = 10000,n.thin = 10)

#results
print(SMSCjagsResults)
#check of convergence
traceplot(SMSCjagsResults)



######################  DEALING WITH MISSING DATA  ##################
# we need the data with all the variables
source("R/MIDataSMSC.fun.R")
MISMSCdata<-MIDataSMSC.fun(mydatapath)
# step 1: Check for auxiliary variables
source("Auxiliary_variables.R")
##only kfs.2 is important auxiliary variable both for the outcome and for th covariate we want to impute
summary(glm_out_MI) #for the outcome
summary(glm_out_MI1) #for the prognostic factor with the missing values
summary(glm_out_MI2)
summary(glm_out_MI3)
summary(glm_out_MI4)
#we keep kfs.2 as auxiliary variable

## Step 2: Creation of 10 imputed datasets
source("MultipleImputations.R")
## Step 3: Calculate the Bayesian estimates in all imputed datasets
source("ModelInImputedDatasets.R")
## Step 4: use the Rubin's rules to pool the stimates & table with all the estimates in the inputed datasets
source("PooledEstimates.R")
#table of all Bayesian results from each one of the imputed datasets
tablewithresults

#pooled estimates
Pooled

## creation of two new columns with the predicted risk of SMSC individuals and the predicted logit risk
source("SMSCRiskDataset.R")

### plot of the distribution of Risk in SMSC
source("PlotsPrognosticModel.R")
RiskDistribution
RiskPrFactor

########################  APPARENT VALIDATION  & Graphs   ############
source("ApparentValidationPrModel.R")

app_cstat_model
mod_log_2
confint(mod_log_2)

########################  Calculation of the EPV and the required sample size based on Riley et al   ############
source("EPVandSampleSizePrModel.R")
EPV

######################  INTERNAL VALIDATION  ##################

source("R/BootstrapValidationPrModel.fun.R")
Validation21<-BootstrapValidationPrModel.fun(imp.list[[1]],10,jagsoutput=SMSCjagsResults1)
val21<-cbind(Validation21[[4]], Validation21[[5]])
Validation22<-BootstrapValidationPrModel.fun(imp.list[[2]],10, jagsoutput=SMSCjagsResults2)
val22<-cbind(Validation22[[4]], Validation22[[5]])
Validation23<-BootstrapValidationPrModel.fun(imp.list[[3]],10, jagsoutput=SMSCjagsResults3)
val23<-cbind(Validation23[[4]], Validation23[[5]])
Validation24<-BootstrapValidationPrModel.fun(imp.list[[4]],10, jagsoutput=SMSCjagsResults4)
val24<-cbind(Validation24[[4]], Validation24[[5]])
Validation25<-BootstrapValidationPrModel.fun(imp.list[[5]],10, jagsoutput=SMSCjagsResults5)
val25<-cbind(Validation25[[4]], Validation25[[5]])
Validation26<-BootstrapValidationPrModel.fun(imp.list[[6]],10, jagsoutput=SMSCjagsResults6)
val26<-cbind(Validation26[[4]], Validation26[[5]])
Validation27<-BootstrapValidationPrModel.fun(imp.list[[7]],10, jagsoutput=SMSCjagsResults7)
val27<-cbind(Validation27[[4]], Validation27[[5]])
Validation28<-BootstrapValidationPrModel.fun(imp.list[[8]],10, jagsoutput=SMSCjagsResults8)
val28<-cbind(Validation28[[4]], Validation28[[5]])
Validation29<-BootstrapValidationPrModel.fun(imp.list[[9]],10, jagsoutput=SMSCjagsResults9)
val29<-cbind(Validation29[[4]], Validation29[[5]])
Validation210<-BootstrapValidationPrModel.fun(imp.list[[10]],10, jagsoutput=SMSCjagsResults10)
val210<-cbind(Validation210[[4]], Validation210[[5]])
val2<-rbind(val1,val2,val3,val4,val5,val6,val7,val8,val9,val10)
colnames(val2)<-c("AUC corrected", "c-slope corrected")
val2
AUC_corrected<-mean(val2[,1])
cslope_corrected<-mean(val2[,2])
cslope_corrected<-mean(val2[,2])

##############################################################################################################################
######################## STAGE 2 - RECALIBRATION FOR THE RCTs DATASET  #########################################
###############################################################################################################3
###############################################################################################################



###### Give your path of data to run the network meta-regression to RCTs
mydatapath="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/data/IPD data from 6 Biogen trials"
mydatapath1="C:/Users/kc19o338/Desktop/RealWorldPredictionModel/HTx/Placebo Arms"
######## load data
###cleaning the data from BIOGEN, defined the outcomes in columns: RELAPSE02Year, RELAPSE01Year, names of Treatments and Drugs
source("R/CleanBiogenEdited.fun.R")
cleanBIOGENtrials<-CleanBiogenEdited.fun(mydatapath)
source("R/cleanPLACEBOtrialsEdited.fun.R")
PlaceboArms<-cleanPLACEBOtrialsEdited.fun(mydatapath1)

RCTs0<-cleanBIOGENtrials$adsl01

RCTs0$TRT01A[which(RCTs0$TRT01A=="AVONEXÂ® 30 mcg")]<-"Avonex"

###drop SENTTINEL STUDY because of combination of treatments and
### drop ADVANCE study because does not provide information for Relapse in 2 years (only for 1 year)
RCTs<-RCTs0[RCTs0$STUDYID!="SENTINEL" & RCTs0$STUDYID!="ADVANCE" ,]

##fix the data to be the same as SMSC (proper transformations) and add the variable Risk
## with the pooled estimates of stage 1
source("RCTsData.R")
# recalibrate the model for the RCTs (use of 4 different methods and we selected the one with the highest AUC)
source("Recalibration.R")
#pots for the risk distribution in RCTs
source("PlotsSMSC.R")
# The Distribution of risk in the whole dataset
RiskDistribution
#The distribution of risk for those who relapsed and did not relapse
RiskPrFactor
# statistical signifant different
t.test(RiskData$Risknew4[RiskData$outcome==1])
t.test(RiskData$Risknew4[RiskData$relapse.2y.after.study==0])

#AUC in RCTs
app_cstat_model4$auc #0.61
# calibration slope and intercept in RCTs
glm(outcome~logitp4,family="binomial",data=RiskData) #c-intercept=0.0, c-slope=1

##############################################################################################################################
######################## STAGE 3 - IPD & AD NETWORK META-REGRESSION   #################################################3
################# WITH RISK AS THE ONLY PREDICTOR AND EFFECT MODIFIER    ###################################################3
###############################################################################################################

#data for jags model
source("DataforIPDAD.R")
source("R/modelIPDADNMR_imputation.R") #source the model will be used for rjags
#run the model
set.seed(2000)
IPDADNMRJAGSresultsSMSC <- jags.parallel(data = jagsdataIPDADNMR,inits=NULL,parameters.to.save = c('gamma.w','gamma.b', 'meanRisk','logitpplacebo','lognr.Gd.enhanced.lesionsAD','gamma', 'ORref','delta','u','loggenderAD', 'meanRisk','months.since.last.relapseAD','ageAD', 'edssAD', 'disease.durationAD', 'logtreatment.naive.prior.visitAD', 'logitp'),model.file = modelIPDADNMR,
                                       n.chains=2,n.iter = 10000,n.burnin = 1000,DIC=F,n.thin = 10)


# Results using Bayesian NMR model
print(IPDADNMRJAGSresultsSMSC)
traceplot(IPDADNMRJAGSresultsSMSC$BUGSoutput,varname=c("ORref","u", "gamma.w", "gamma"))
### plot for predicted probabilities to relapse under all the available options
source("GraphForPredictedRiskSMSC.R")
Graph #for absolute presicted probabilities
Plot_OR #for ORs


