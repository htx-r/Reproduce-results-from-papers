# Calculate the mean observed outcome in each bin
calibration_summary <- aggregate(observed ~ predicted_bin, data=calibration_data, FUN=mean)
# Calculate the midpoint of each bin for plotting
calibration_summary$predicted_midpoint <- as.numeric(sapply(levels(calibration_data$predicted_bin), function(b) mean(as.numeric(unlist(strsplit(substr(b, 2, nchar(b)-1), ","))))))
# Bin the predicted probabilities into intervals
calibration_data$predicted_bin <- cut(calibration_data$predicted, breaks=seq(0, 1, length.out = 11), include.lowest = TRUE, right = FALSE)
# Calculate the mean observed outcome for each bin
calibration_summary <- aggregate(observed ~ predicted_bin, data=calibration_data, FUN=mean)
# Calculate the midpoint of each bin for plotting by extracting the actual bin intervals used
calibration_summary$predicted_midpoint <- as.numeric(sapply(levels(calibration_summary$predicted_bin), function(b) {
bounds <- as.numeric(unlist(strsplit(substr(b, 2, nchar(b)-1), ",")))
mean(bounds)
}))
calibration_data$predicted_bin
calibration_summary
# Assuming 'SMSCdataC' is your data frame with the 'outcome' and 'Risk' columns
SMSCdataC$outcome2 <- as.numeric(SMSCdataC$outcome) - 1  # Convert outcomes to 0 and 1 if not already
# Create a new dataframe with the predicted probabilities and the actual outcomes
calibration_data <- data.frame(
predicted = SMSCdataC$Risk,
observed = SMSCdataC$outcome2
)
# First, create a data frame of bins and their midpoints
bin_edges <- seq(0, 1, length.out = 11)
bin_midpoints <- bin_edges[-length(bin_edges)] + diff(bin_edges) / 2
bins_df <- data.frame(
predicted_bin = cut(bin_midpoints, breaks=bin_edges, include.lowest = TRUE, right = FALSE),
predicted_midpoint = bin_midpoints
)
# Bin the predicted probabilities into intervals
calibration_data$predicted_bin <- cut(calibration_data$predicted, breaks=bin_edges, include.lowest = TRUE, right = FALSE)
# Calculate the mean observed outcome for each bin
calibration_summary <- aggregate(observed ~ predicted_bin, data=calibration_data, FUN=mean)
# Merge the bins_df with calibration_summary to get the midpoints
calibration_summary <- merge(calibration_summary, bins_df, by = "predicted_bin")
# Now create the plot with ggplot2
ggplot(calibration_summary, aes(x = predicted_midpoint, y = observed)) +
geom_point() +  # Add the binned data points
geom_line(aes(group = 1)) +  # Connect the points with a line
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +  # Add a diagonal line for perfect calibration
xlim(0, 0.8) +  # Set x-axis limits
ylim(0, 1) +  # Set y-axis limits
xlab("Predicted Probability") +
ylab("Observed Frequency") +
ggtitle("Calibration Plot") +
theme_bw()  # Use a theme with a grey background
# Assuming 'SMSCdataC' is your data frame with 'Risk' as the predicted probabilities and 'outcome' as the observed outcomes
SMSCdataC$outcome2 <- as.numeric(SMSCdataC$outcome) - 1  # Adjust if necessary to ensure binary outcomes are 0 and 1
# Prepare the data
calibration_data <- data.frame(
predicted = SMSCdataC$Risk,
observed = SMSCdataC$outcome2
)
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "red") +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_bw()  # Use a theme with a grey background
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "red",size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_bw()  # Use a theme with a grey background
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "red") +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_bw()  # Use a theme with a grey background
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "red", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_bw()  # Use a theme with a grey background
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "red", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) # Use a theme with a grey background
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) # Use a theme with a grey background
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+coord_fixed(ratio=1) # Use a theme with a grey background
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+ylim(c(0,0.7))+xlim(c(0,0.7)) # Use a theme with a grey background
+ylim(c(0,0.7))+xlim(c(0,0.7)) # Use a theme with a grey background
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+
theme(aspect.ratio = 1)
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+
theme(aspect.ratio = 1)
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
# Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+
theme(aspect.ratio = 1)
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+
theme(aspect.ratio = 1)
# Plot with ggplot2 using a loess smoother
p<-ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
xlim(0, 0.8) +  # Set x-axis limits if needed
ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+
theme(aspect.ratio = 1)
ggsave("calibration_plot_square.png", plot = p, width = 6, height = 6, units = "in")
# Plot with ggplot2 using a loess smoother
p<-ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
# xlim(0, 0.8) +  # Set x-axis limits if needed
#ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+
theme(aspect.ratio = 1)
ggsave("calibration_plot_square.png", plot = p, width = 6, height = 6, units = "in")
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
# xlim(0, 0.8) +  # Set x-axis limits if needed
#ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+coord_fixed
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
# xlim(0, 0.8) +  # Set x-axis limits if needed
#ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+coord_fixed()
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
# xlim(0, 0.8) +  # Set x-axis limits if needed
#ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+coord_fixed()
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = FALSE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
# xlim(0, 0.8) +  # Set x-axis limits if needed
#ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+coord_equal(xlim=c(0,0.7),ylim=c(0,0.7))
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size=1.2) +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
# xlim(0, 0.8) +  # Set x-axis limits if needed
#ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+coord_equal(xlim=c(0,0.7),ylim=c(0,0.7))
# Plot with ggplot2 using a loess smoother
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size=1.2, fill = "lightblue") +  # Apply loess smoother, without standard error band
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
# xlim(0, 0.8) +  # Set x-axis limits if needed
#ylim(0, 1) +  # Set y-axis limits to the range of probabilities
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)+coord_equal(xlim=c(0,0.7),ylim=c(0,0.7))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "lightblue", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.7), ylim = c(0, 0.7))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "lightblue", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.7), ylim = c(0, 0.7))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "lightblue", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "lightgrey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))+
annotate("text", x = 0.65, y = 0.75, label = "Info for y=1", size = 4, hjust = 0)
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))+
+ geom_segment(aes(x = 0.5, y = 0.75, xend = 0.5, yend = 0.7),
arrow = arrow(type = "closed", length = unit(0.2, "inches")))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))+
geom_segment(aes(x = 0.5, y = 0.75, xend = 0.5, yend = 0.7),
arrow = arrow(type = "closed", length = unit(0.2, "inches")))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))
ggsave("plot.emf", plot = last_plot(), width = 8, height = 8)
ggsave("plot.svg", plot = last_plot(), width = 8, height = 8)
########################  Calculation of the EPV and the required sample size based on Riley et al   ############
source("EPVandSampleSizePrModel.R")
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))
ggsave("plot.svg", plot = last_plot(), width = 8, height = 8)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0.9, 1), ylim = c(0.9, 1))
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) + xlim(c(0,0.75))
ggsave("plot.svg", plot = last_plot(), width = 8, height = 8)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) + xlim(c(0,0.75))
ggsave("plot2.svg", plot = last_plot(), width = 8, height = 8)
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))
ggsave("plot.svg", plot = last_plot(), width = 8, height = 8)
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.6), ylim = c(0, 0.6))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))
# theme(aspect.ratio = 1)
ggplot(calibration_data, aes(x = predicted, y = observed)) +
# Plot the raw data points with some transparency
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.75), ylim = c(0, 0.75))
ggplot(calibration_data, aes(x = predicted, y = observed)) +
geom_point(alpha = 0.4) +  # Add if you still want the raw data points
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +
scale_fill_manual(values = "grey", name = "") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
xlim(0, 0.6) + ylim(0, 0.6) +  # Set the limits here
coord_fixed(ratio = 1)  # Enforce an equal aspect ratio
filtered_data <- calibration_data %>%
filter(predicted <= 0.6, observed <= 0.6)
# theme(aspect.ratio = 1)
ggplot(filtered_data, aes(x = predicted, y = observed)) +
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.6), ylim = c(0, 0.6))
filtered_data
filtered_data <- calibration_data %>%
filter(predicted <= 0.6)
# theme(aspect.ratio = 1)
ggplot(filtered_data, aes(x = predicted, y = observed)) +
geom_smooth(method = "loess", se = TRUE, color = "blue", size = 1.2, aes(fill = "Confidence")) +  # Apply loess smoother with 95% CI
scale_fill_manual(values = "grey", name = "") +  # Manually set the fill color for the CI
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Ideal calibration line
labs(x = "Predicted Probability", y = "Observed Proportion") +
ggtitle("Calibration Plot with Loess Smoother") +
theme_grey(base_size = 14) +
coord_equal(xlim = c(0, 0.6), ylim = c(0, 0.6))
ggsave("plot.svg", plot = last_plot(), width = 8, height = 8)
summary(SMSCdataC$Risk)
