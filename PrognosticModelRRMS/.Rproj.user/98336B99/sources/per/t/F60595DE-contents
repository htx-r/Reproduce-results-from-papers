#################################################################
#         Master analysis for MS Prognostic model MODEL         #
#          using SMSC observational study - repeated measures   #
#               Generalized mixed effects model                 #
#################################################################



##########################################################
############### LIBRARIES #################################
### Load needed libraries
library(readxl)
library(dplyr)
library(rms)
library(lme4)
library(R2jags)
library(mitml)
library(jomo)
library(xlsx)
library(ggpubr)
library(gridExtra)
library(devtools)
library(pROC)
library(vcd)
library(plyr)
library(pmsampsize)
library(shiny)
library(shinythemes)

# give/change your datapath (the datapath that includes the data)
mydatapath="C:/Users/kc19o338/Desktop/SMSC Basel"

########################## DATASET NEEDED FOR THE PRE-SPECIFIED PROGNOSTIC MODEL ##############################
# function that keeps only the needed variables (selected via pre-existing prognostic models on the literature, for RRMS patients)
# and makses the proper transformations for continues and categorical variables
# (in case you want to see all summary statistics for the SMSC data before and after the transformations you can run the SMSC_Summary.R script)
source("R/FinalDataSMSC.fun.R")
SMSCdata<-FinalDataSMSC.fun(mydatapath)
# the dataset with complete cases only, no missing values at all
SMSCdataC<-na.omit(SMSCdata)


############################ Frequentist framework ######################################################################
# just a test using generalized linear mixed effects model in a frequentist setting

source("Frequentist_glmm.R")

#the results of the mixed-effects model
summary(glmer_out)
# compare them with a model with fixed effects only (glm)
summary(glm_out)

#check the correlations between the categorical variables
#assocstats(table(SMSCdata_glmer$nr.Gd.enhanced.lesions,SMSCdata_glmer$nr.relapses.2y.prior.study))
#assocstats(table(SMSCdata_glmer$nr.Gd.enhanced.lesions,SMSCdata_glmer$treatment.naive.prior.visit))
#t.test(SMSCdata_glmer$months.since.last.relapse[which(SMSCdata_glmer$nr.Gd.enhanced.lesions==0)], SMSCdata_glmer$months.since.last.relapse[which(SMSCdata_glmer$nr.Gd.enhanced.lesions==1)])
#we can see that Nr.Gd enhanced.lessions is associated with nr.relapses.prior.study, treatment.naive.prior.visit and months.since.last.relapse

#check if resstricted cubic splines are needed
source("Check_rcs.R")
anova(glm_rcs) #it seems that there is no variable with non-linear relationhip

############################ Bayesian framework ######################################################################

##### Read the data needed for the jags model
source("DataJagsPrM.R")
#source the jags model
source("R/jagsmodelSMSC.R")
# give initial values for the jags model
jags.inits <- function(){
  list("b"=c(0,0,0,0,0,0,0,0,0,0,0),"sigma"=0.02,"rho"=0.4)
}
# run the jugs model
set.seed(2000)
SMSCjagsResults <- jags.parallel(data = jagsdataSMSC ,inits= jags.inits,
                                 parameters.to.save = c('b','sigma', 'rho' ),model.file = jagsmodelSMSC,
                                 n.chains=2,n.iter = 50000,n.burnin = 10000,n.thin = 10)

#results
print(SMSCjagsResults)
#check of convergence
traceplot(SMSCjagsResults)



######################  DEALING WITH MISSING DATA  ##################
# we need the data with all the variables
source("R/MIDataSMSC.fun.R")
MISMSCdata<-MIDataSMSC.fun(mydatapath)
# step 1: Check for auxiliary variables
source("Auxiliary_variables.R")
##only kfs.2 is important auxiliary variable both for the outcome and for th covariate we want to impute
summary(glm_out_MI) #for the outcome
summary(glm_out_MI1) #for the prognostic factor with the missing values
summary(glm_out_MI2)
summary(glm_out_MI3)
summary(glm_out_MI4)
#we keep kfs.2 as auxiliary variable

## Step 2: Creation of 10 imputed datasets
source("MultipleImputations.R")
## Step 3: Calculate the Bayesian estimates in all imputed datasets
source("ModelInImputedDatasets.R")
## Step 4: use the Rubin's rules to pool the stimates & table with all the estimates in the inputed datasets
source("PooledEstimates.R")
  #table of all Bayesian results from each one of the imputed datasets
tablewithresults
  #pooled estimates
Pooled

## creation of two new columns with the predicted risk of SMSC individuals and the predicted logit risk
source("SMSCRiskDataset.R")

### plot of the distribution of Risk in SMSC
source("PlotsPrognosticModel.R")
RiskDistribution
RiskPrFactor

########################  APPARENT VALIDATION  & Graphs   ############
source("ApparentValidationPrModel.R")

app_cstat_model
mod_log_2
confint(mod_log_2)

########################  Calculation of the EPV and the required sample size based on Riley et al   ############
source("EPVandSampleSizePrModel.R")
EPV

##################################### DECISION CURVE ANALYSIS ##################################################
source("R/dca.fun.R")
SMSCdataC$outcome2<-as.numeric(SMSCdataC$outcome)-1
SMSCdataC$PrognosticModel<-SMSCdataC$Risk
dca.fun(data=SMSCdataC, outcome="outcome2", predictors="PrognosticModel", xstop = 0.4)

############################# R-shiny app ##################################################################
source('R-shinyPr.R')
shinyApp(ui = ui, server = server) #also available in

######################  INTERNAL VALIDATION  ##################

source("R/BootstrapValidationPrModel.fun.R")
Validation21<-BootstrapValidationPrModel.fun(imp.list[[1]],10,jagsoutput=SMSCjagsResults1)
val21<-cbind(Validation21[[4]], Validation21[[5]])
Validation22<-BootstrapValidationPrModel.fun(imp.list[[2]],10, jagsoutput=SMSCjagsResults2)
val22<-cbind(Validation22[[4]], Validation22[[5]])
Validation23<-BootstrapValidationPrModel.fun(imp.list[[3]],10, jagsoutput=SMSCjagsResults3)
val23<-cbind(Validation23[[4]], Validation23[[5]])
Validation24<-BootstrapValidationPrModel.fun(imp.list[[4]],10, jagsoutput=SMSCjagsResults4)
val24<-cbind(Validation24[[4]], Validation24[[5]])
Validation25<-BootstrapValidationPrModel.fun(imp.list[[5]],10, jagsoutput=SMSCjagsResults5)
val25<-cbind(Validation25[[4]], Validation25[[5]])
Validation26<-BootstrapValidationPrModel.fun(imp.list[[6]],10, jagsoutput=SMSCjagsResults6)
val26<-cbind(Validation26[[4]], Validation26[[5]])
Validation27<-BootstrapValidationPrModel.fun(imp.list[[7]],10, jagsoutput=SMSCjagsResults7)
val27<-cbind(Validation27[[4]], Validation27[[5]])
Validation28<-BootstrapValidationPrModel.fun(imp.list[[8]],10, jagsoutput=SMSCjagsResults8)
val28<-cbind(Validation28[[4]], Validation28[[5]])
Validation29<-BootstrapValidationPrModel.fun(imp.list[[9]],10, jagsoutput=SMSCjagsResults9)
val29<-cbind(Validation29[[4]], Validation29[[5]])
Validation210<-BootstrapValidationPrModel.fun(imp.list[[10]],10, jagsoutput=SMSCjagsResults10)
val210<-cbind(Validation210[[4]], Validation210[[5]])
val2<-rbind(val1,val2,val3,val4,val5,val6,val7,val8,val9,val10)
colnames(val2)<-c("AUC corrected", "c-slope corrected")
val2
AUC_corrected<-mean(val2[,1])
cslope_corrected<-mean(val2[,2])
cslope_corrected<-mean(val2[,2])

